/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.tcsbank.sme.reporting

import com.github.junrar.Junrar
import org.apache.commons.io.FileUtils
import org.jsoup.Jsoup
import org.jsoup.nodes.Node
import org.w3c.dom.Document
import org.w3c.dom.Element
import java.io.File
import java.net.URL
import java.net.URLEncoder
import javax.xml.parsers.DocumentBuilderFactory


class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

const val INSERT_START = "insert into sa_rosstat_report_name(okud, code, idp, name, short_name) values ("
const val INSERT_END = ");"

fun main(args: Array<String>) {
    val tableNode = Jsoup.parse(
        URL("https://www.gks.ru/metod/XML-2019/XML_plan_2019.htm"), 20000
    ).body().childNodes()[13].childNodes()[1]

    val content = tableNode.childNodes()[2].childNodes()
        .filterIndexed { index, node -> index > 4 }
        .filterIndexed { index, value -> isUneven(index) }
        .filterIndexed { index, value -> index < 204 }

    val modelList = content.map { row -> fillMetadata(row) }
    val (validValues, invalidValues) =
        modelList.partition { it.workCode.length == 8 && it.okud.length == 7 }

    validValues.forEach { templateMetadata ->
        File("archives").mkdir()
        File("extracted").mkdir()
        val file = File("archives/${templateMetadata.okud}.rar")
        val index = templateMetadata.templateXmlLink.lastIndexOf("/")
        val filename = templateMetadata.templateXmlLink.substring(index + 1)
        val link = templateMetadata.templateXmlLink.substring(0, index + 1)
        val url = URL(link + if (filename == "18-ะะก_.rar") URLEncoder.encode(filename) else filename)
        FileUtils.copyURLToFile(url, file, 1000, 10000)

        val extractDir = File("extracted/${templateMetadata.okud}").also { it.mkdir() }
        Junrar.extract(file, extractDir)

        val xmlTemplateFile = extractDir.listFiles()?.first { it.name.endsWith(".xml") }
            ?: throw IllegalStateException("template not found")

        val xmlTemplate = parse(xmlTemplateFile)
        val attributes = xmlTemplate.documentElement.attributes
        attributes.length
        val map = setOf("code", "idp", "name", "OKUD").map { it to attributes.getNamedItem(it) }.toMap()
        templateMetadata.code = map["code"]?.nodeValue?: throw IllegalStateException("value not found")
        templateMetadata.idp = map["idp"]?.nodeValue?: throw IllegalStateException("value not found")
        templateMetadata.parsedName = map["name"]?.nodeValue?: throw IllegalStateException("value not found")
        templateMetadata.parsedOkud = map["OKUD"]?.nodeValue?: throw IllegalStateException("value not found")

        println("${templateMetadata.okud} extracted")
    }

    val sqlList = validValues.map {
        "$INSERT_START'${it.okud}', '${it.code}', '${it.idp}', '${it.name}', '${it.shortName}'$INSERT_END"
    }.toList()

    val printWriter = File("reportName.sql").printWriter()
    sqlList.forEach { printWriter.println(it) }
    printWriter.close()

    println(App().greeting)
}

fun parse(file: File): Document {
    val factory = DocumentBuilderFactory.newInstance()
    val builder = factory.newDocumentBuilder()
    return builder.parse(file)
}

fun fillMetadata(row: Node): TemplateMetadata {
    val rows = row.childNodes().filterIndexed { index, node -> isUneven(index) }
//    (rows[5] as org.jsoup.nodes.Element).text()
    return TemplateMetadata(
        rowNum = extractVal(0, rows),
        workCode = extractVal(1, rows),
        okud = extractVal(2, rows),
        period = extractVal(3, rows),
        shortName = extractVal(4, rows),
        name = extractVal(5, rows),
        createDate = extractVal(6, rows),
        economicalXmlLink = extractLink(7, rows),
        templateXmlLink = extractLink(8, rows),
        updateDate = extractVal(9, rows),
        code = null,
        idp = null,
        parsedName = null,
        parsedOkud = null
    )
}

private fun isUneven(index: Int) = index % 2 == 1

private fun extractLink(index: Int, nodes: List<Node>) =
    try {
        "https://www.gks.ru/metod/XML-2019/${nodes[index].childNodes()[0].attributes()["href"]}"
    } catch (e: Exception) {
        ""
    }

private fun extractVal(index: Int, nodes: List<Node>) =
    try {
        (nodes[index] as org.jsoup.nodes.Element).text()
    } catch (e: Exception) {
        ""
    }